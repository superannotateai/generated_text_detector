{"components":[{"id":"r_se3reh","type":"grid","permissions":[],"align":"top","isResizable":false,"children":[{"id":"r_fuamon","span":12,"children":[{"id":"prompt","type":"textarea","permissions":[{"roles":[3],"statuses":[1,2,4,6],"visibility":2}],"hasTooltip":false,"label":"Prompt","placeholder":"","isRequired":false,"value":"","min":0,"max":4000,"exclude":false},{"id":"completion","type":"textarea","permissions":[],"hasTooltip":false,"label":"Completion","placeholder":"","isRequired":false,"value":"","min":0,"max":8000,"exclude":false},{"id":"generated_text_review","type":"group","permissions":[{"roles":[3],"statuses":[1,2,4,6],"visibility":1}],"index":0,"isTemplate":false,"deletable":false,"children":[{"id":"generated_score","type":"slider","permissions":[{"roles":[2,4,3],"statuses":[1,2,3,4,5,6],"visibility":2}],"hasTooltip":true,"tooltip":"Probability that text was generated by LLM","label":"Generated score","min":0,"max":100,"step":1,"suffix":"%","sliderType":"slider","value":50,"isRequired":false,"exclude":false},{"id":"author","type":"paragraph","permissions":[],"hasTooltip":false,"exclude":false,"label":"Author","value":""},{"id":"check_generation_score_button","type":"button","permissions":[],"hasTooltip":false,"text":"Check Generation Score","icon":"i-check","showIcon":true,"showLabel":true}]}]}]}],"code":"from typing import List, Union\nfrom accessor import (\n    getValue,\n    setValue,\n    setLoading\n)\nfrom environments import URL\nimport json\nimport requests\nimport urllib.parse\n\ntextarea_completion = ['completion']\ngroup_generated_text_review = ['generated_text_review']\nslider_generated_score = ['generated_text_review', 0, 'generated_score']\nparagraph_author = ['generated_text_review', 0, 'author']\n\nbutton_check_generation_score_button = ['generated_text_review', 0, 'check_generation_score_button']\n\ndef on_check_generation_score_button_click(path: List[Union[str, int]]):\n    # Set loading while calling the API\n    setLoading(True)\n\n    # Get completion value and call service\n    completion_text = getValue(textarea_completion)\n    detection_report = call_detection_service(completion_text)\n\n    # Turn off the loading\n    setLoading(False)\n\n    # Set generated score and author\n    setValue(slider_generated_score, round(detection_report[\"generated_score\"] * 100, 2))\n    setValue(paragraph_author, detection_report[\"author\"])\n\n    return\n\n\ndef call_detection_service(text: str) -> dict:\n    resp = requests.post(\n        url=urllib.parse.urljoin(URL, \"detect\"),\n        json={\"text\": text}\n    )\n    if resp.status_code != 200:\n        raise Exception(f\"The service returned an unknown error\\nStatus code: {resp.status_code}\\nContent: {resp.content}\")\n        \n    res = json.loads(resp.content.decode('utf-8'))\n\n    return res\n    ","environments":[{"name":"URL","value":"","secure":true}]}